# -*- coding: utf-8 -*-
"""SMA_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bl_g1La6mRPM-k4XGvkbmt6XwwZ5PqY_
"""

from google.colab import drive
drive.mount('/content/gdrive')

!cd "/content/gdrive/MyDrive/SMA_DATASETS/Assignment-1/"

import numpy as np
import networkx.algorithms.community as netcom
import time
import networkx as net
import matplotlib.pyplot as plt

def etor(gh):
    GNdict__ = net.edge_betweenness_centrality(gh)
    edge = ()

  # Here we extract the edge 
  #with the maximum edge betweenness centrality score value
    for key, value in sorted(GNdict__.items(), key=lambda item: item[1], reverse = True):
        edge = key
        break
        
    return edge

def func_girvan_n(gh):
    # Here we are going to find the number of connected components
    var = net.connected_components(gh)
    var_c = net.number_connected_components(gh)

    while(var_c == 1):
        gh.remove_edge(etor(gh)[0], etor(gh)[1])
        var = net.connected_components(gh)
        var_c = net.number_connected_components(gh)

    return var

kara_1 = net.read_gml('/content/gdrive/MyDrive/SMA_DATASETS/Assignment-1/karate.gml', label = 'id')
dol_2 = net.read_gml('/content/gdrive/MyDrive/SMA_DATASETS/Assignment-1/dolphins.gml')
jaz_3 = net.read_weighted_edgelist('/content/gdrive/MyDrive/SMA_DATASETS/Assignment-1/jazz.net')

# kara1 from karate.gml
seconds_old = time.time()

# Here we are going to find communities in the graph
c1 = func_girvan_n(kara_1.copy())

# lets get the nodes forming the communities in node_group1
ng1 = []

for i in c1:
    ng1.append(list(i))

seconds_new = time.time()

print("Number of Clusters : ")
print("Clusters : ")
print(ng1)   

print(len(ng1))   
print("Modularity : " + str(netcom.modularity(kara_1, ng1))+ " Time taken : ", seconds_new - seconds_old)

# dol_2
seconds_old = time.time()

# Here we are going to find communities in the graph
c2 = func_girvan_n(dol_2.copy())

# lets get the nodes forming the communities in node_group2
ng2 = []

for i in c2:
    ng2.append(list(i))

seconds_new = time.time()
print()
print("Number of Clusters : ") 
print(len(ng2))
print("Clusters : ")
print(ng2)    

  
print("Modularity : " + str(netcom.modularity(dol_2, ng2))+" Time taken : ", seconds_new - seconds_old)

# jaz_3
seconds_old = time.time()

#  Here we are going to find communities in the graph
c3 = func_girvan_n(jaz_3.copy())

# lets get the nodes forming the communities in node_group3
ng3 = []

for i in c3:
    ng3.append(list(i))

seconds_new = time.time()
print("Time taken : ", seconds_new - seconds_old)
print("Number of Clusters : ")
print("Clusters : ")
print(ng3)  

print(len(ng3))   

print("Modularity : " + str(netcom.modularity(jaz_3, ng3)))

####################3

